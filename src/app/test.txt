'use client'
import React, { useState, useEffect } from 'react'
import { BsChevronCompactUp, BsSliders2Vertical } from 'react-icons/bs'

type Props = {}

export default function Filter({}: Props) {
  const [showFilter, setShowFilter] = useState<boolean>(false)
  const [selectedCategories, setSelectedCategories] = useState<string[]>([])
  const [selectedPlaceNumber, setSelectedPlaceNumber] = useState<string[]>([])
  const [allHexValues, setAllHexValues] = useState<string[]>([])
  const [selectedHexValues, setSelectedHexValues] = useState<string[]>([])
  const [price, setPrice] = useState({
    min: 0,
    max: 100
  })

  const handleMinChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.name === "max" ? parseInt(e.target.value) : e.target.value;
    setPrice({
      ...price,
      [e.target.name]: value
    })
  }

  const handleMaxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.name === "max" ? parseInt(e.target.value) : e.target.value;
    setPrice({
      ...price,
      [e.target.name]: value
    })
  }

  const toggleCategory = (category: string) => {
    setSelectedCategories((prevCategories) =>
      prevCategories.includes(category)
        ? prevCategories.filter((c) => c !== category)
        : [...prevCategories, category]
    )
  }

  const toggleSize = (size: string) => {
    setSelectedPlaceNumber((prevSize) =>
      prevSize.includes(size)
        ? prevSize.filter((s) => s !== size)
        : [...prevSize, size]
    )
  }

  const toggleColor = (color: string) => {
    setSelectedHexValues((prevColor) =>
      prevColor.includes(color)
        ? prevColor.filter((c) => c !== color)
        : [...prevColor, color]
    )
  }

  async function getAllColors(url: string) {
    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      console.log(data);
      return data;
    } catch (error) {
      console.error('Error fetching data:', error);
      throw error;
    }
  }

  useEffect(() => {
    async function fetchColors() {
      try {
        const allColors = await getAllColors('http://localhost:3001/car-colors');
        if (allColors) {
          const hexSet = new Set<string>();
          allColors.forEach((element: any) => {
            const colors = element.color.split(',');
            colors.forEach((color: string) => {
              const hexValue = color.replace("#", "")
              hexSet.add(hexValue);
            });
          });
          const uniqueHexValues: string[] = Array.from(hexSet);
          setAllHexValues(uniqueHexValues);
        }
      } catch (error) {
        console.error('Error fetching colors:', error);
      }
    }

    fetchColors();
  }, []);

  return (
    <div className='relative'>
      <div className={`max:w-[250px] border-l-[0.5px] border-r-[0.5px] ${showFilter ? "max-md:w-[250px]" : "w-0 max-md:invisible"}`}>
        <div className='flex items-center justify-between px-5 py-4 border-b-[0.5px]'>
          <h1 className='text-neutral-800'>Filter</h1>
          <BsSliders2Vertical size={20} className='text-neutral-600' />
        </div>
        <div className='flex flex-col py-4 pb-3 pb-5 text-sm text-neutral-600 border-b-[0.5px]'>
          <span
            className={`py-3 px-5 ${selectedCategories.includes('SUV') ? "bg-purple-500" : ""}`}
            onClick={() => toggleCategory('SUV')}
          >
            SUV
          </span>
          <span
            className={`py-3 px-5 ${selectedCategories.includes('Sports') ? "bg-purple-500" : ""}`}
            onClick={() => toggleCategory('Sports')}
          >
            Sports
          </span>
        </div>
        <div className='border-b-[0.5px] pb-10'>
          <div className='flex items-center justify-between px-5 py-4 border-b-[0.5px] mb-5'>
            <h1 className='text-neutral-800'>Prices</h1>
            <BsChevronCompactUp size={18} className='text-neutral-600' />
          </div>
          <div className='grid grid-cols-2 gap-5 px-5 overflow-hidden'>
            <div className='flex flex-col justify-center items-center'>
              <label htmlFor="" className='text-[15px] opacity-75'>Min</label>
              <div className='relative'>
                <span className='absolute left-3'>$</span>
                <input
                  className='w-full outline-none border-[1px] rounded-lg px-2 text-center py-[2px]'
                  type="number"
                  name="min"
                  onChange={handleMinChange}
                  value={price.min}
                />
              </div>
            </div>
            <div className='flex flex-col justify-center items-center'>
              <label htmlFor="" className='text-[15px] opacity-75'>Max</label>
              <div className='relative'>
                <span className='absolute left-3'>$</span>
                <input
                  className='w-full outline-none border-[1px] rounded-lg px-2 text-center py-[2px]'
                  type="number"
                  name="max"
                  onChange={handleMaxChange}
                  value={price.max}
                />
              </div>
            </div>
          </div>
        </div>
        <div className='border-b-[0.5px]'>
          <div className='flex items-center justify-between py-4 border-b-[0.5px]'>
            <h1 className='text-neutral-800'>Color</h1>
          </div>
          <ul className='grid grid-cols-4 px-5 gap-5'>
            {allHexValues.map((hexValue, index) => (
              <li
                key={index}
                className={`w-[40px] h-[40px] rounded-2xl border-[0.5px] border-neutral-300 cursor-pointer ${selectedHexValues.includes(`#${hexValue}`) ? "shadow-2xl opacity-25" : ""}`}
                style={{ backgroundColor: `#${hexValue}` }}
                onClick={() => toggleColor(`#${hexValue}`)}
              ></li>
            ))}
          </ul>
        </div>
        <div className='sizes'>
          <div className='border-b-[0.5px]'>
            <div className='flex items-center justify-between py-4 border-b-[0.5px]'>
              <h1 className='text-neutral-800'>Places</h1>
            </div>
            <ul className='grid grid-cols-4 px-5 gap-5'>
              <li
                className={`border-[0.5px] rounded-lg text-center text-[14px] py-[2px] cursor-pointer ${selectedPlaceNumber.includes('5') ? 'bg-neutral-900 text-white' : ''}`}
                onClick={() => toggleSize('5')}
              >
                5
              </li>
              <li
                className={`border-[0.5px] rounded-lg text-center text-[14px] py-[2px] cursor-pointer ${selectedPlaceNumber.includes('2') ? 'bg-neutral-900 text-white' : ''}`}
                onClick={() => toggleSize('2')}
              >
                2
              </li>
            </ul>
          </div>
        </div>
        <div onClick={() => setShowFilter(!showFilter)} className='absolute md:hidden top-[20px] right-[-42px]'>Filter</div>
      </div>
    </div>
  )
}
